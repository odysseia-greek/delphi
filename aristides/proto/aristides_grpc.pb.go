// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: proto/aristides.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AristidesClient is the client API for Aristides service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AristidesClient interface {
	// Get the config from aristides
	GetSecret(ctx context.Context, in *VaultRequest, opts ...grpc.CallOption) (*ElasticConfigVault, error)
	GetNamedSecret(ctx context.Context, in *VaultRequestNamed, opts ...grpc.CallOption) (*ElasticConfigVault, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	ShutDown(ctx context.Context, in *ShutDownRequest, opts ...grpc.CallOption) (*ShutDownResponse, error)
}

type aristidesClient struct {
	cc grpc.ClientConnInterface
}

func NewAristidesClient(cc grpc.ClientConnInterface) AristidesClient {
	return &aristidesClient{cc}
}

func (c *aristidesClient) GetSecret(ctx context.Context, in *VaultRequest, opts ...grpc.CallOption) (*ElasticConfigVault, error) {
	out := new(ElasticConfigVault)
	err := c.cc.Invoke(ctx, "/delphi_aristides.Aristides/GetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aristidesClient) GetNamedSecret(ctx context.Context, in *VaultRequestNamed, opts ...grpc.CallOption) (*ElasticConfigVault, error) {
	out := new(ElasticConfigVault)
	err := c.cc.Invoke(ctx, "/delphi_aristides.Aristides/GetNamedSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aristidesClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/delphi_aristides.Aristides/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aristidesClient) ShutDown(ctx context.Context, in *ShutDownRequest, opts ...grpc.CallOption) (*ShutDownResponse, error) {
	out := new(ShutDownResponse)
	err := c.cc.Invoke(ctx, "/delphi_aristides.Aristides/ShutDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AristidesServer is the server API for Aristides service.
// All implementations must embed UnimplementedAristidesServer
// for forward compatibility
type AristidesServer interface {
	// Get the config from aristides
	GetSecret(context.Context, *VaultRequest) (*ElasticConfigVault, error)
	GetNamedSecret(context.Context, *VaultRequestNamed) (*ElasticConfigVault, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	ShutDown(context.Context, *ShutDownRequest) (*ShutDownResponse, error)
	mustEmbedUnimplementedAristidesServer()
}

// UnimplementedAristidesServer must be embedded to have forward compatible implementations.
type UnimplementedAristidesServer struct {
}

func (UnimplementedAristidesServer) GetSecret(context.Context, *VaultRequest) (*ElasticConfigVault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedAristidesServer) GetNamedSecret(context.Context, *VaultRequestNamed) (*ElasticConfigVault, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamedSecret not implemented")
}
func (UnimplementedAristidesServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedAristidesServer) ShutDown(context.Context, *ShutDownRequest) (*ShutDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutDown not implemented")
}
func (UnimplementedAristidesServer) mustEmbedUnimplementedAristidesServer() {}

// UnsafeAristidesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AristidesServer will
// result in compilation errors.
type UnsafeAristidesServer interface {
	mustEmbedUnimplementedAristidesServer()
}

func RegisterAristidesServer(s grpc.ServiceRegistrar, srv AristidesServer) {
	s.RegisterService(&Aristides_ServiceDesc, srv)
}

func _Aristides_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AristidesServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delphi_aristides.Aristides/GetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AristidesServer).GetSecret(ctx, req.(*VaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aristides_GetNamedSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VaultRequestNamed)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AristidesServer).GetNamedSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delphi_aristides.Aristides/GetNamedSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AristidesServer).GetNamedSecret(ctx, req.(*VaultRequestNamed))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aristides_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AristidesServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delphi_aristides.Aristides/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AristidesServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Aristides_ShutDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AristidesServer).ShutDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delphi_aristides.Aristides/ShutDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AristidesServer).ShutDown(ctx, req.(*ShutDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Aristides_ServiceDesc is the grpc.ServiceDesc for Aristides service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Aristides_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "delphi_aristides.Aristides",
	HandlerType: (*AristidesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecret",
			Handler:    _Aristides_GetSecret_Handler,
		},
		{
			MethodName: "GetNamedSecret",
			Handler:    _Aristides_GetNamedSecret_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Aristides_Health_Handler,
		},
		{
			MethodName: "ShutDown",
			Handler:    _Aristides_ShutDown_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/aristides.proto",
}
